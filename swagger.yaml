swagger: "2.0"
info:
  description: "Documentação de um serviço de logging. Você deve utilizar o `token` nos métodos que requerem autenticação. O unico método que não requer **os unicos metodos que não requerem token é o de registar usuario e e o de fazer login.**"
  version: "1.0.0"
  title: "Central de erros"
host: "central-de-erros.swagger.io"
basePath: "/v2"
tags:
- name: "log"
  description: "Endpoints de Log"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /logs/log-create:
    post:
      tags:
      - "log"
      summary: "Adicionar log"
      description: "Salva um novo log com os dados especificados"
      operationId: "createLog"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "log"
        description: "Log que será adicionado"
        required: true
        schema:
          $ref: "#/definitions/Log"
      responses:
        "200":
          description: "Log criado com sucesso."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Log"
        "400":
          description: "Dados invalidos."
        "401":
          description: "Token inválido!"
      security:
      - token: []
  /logs/{id}/log-update:
    put:
      tags:
      - "log"
      summary: "Atualiza um log existente"
      description: ""
      operationId: "log-update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID do Log a ser retornado."
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "Log que será atualizado."
        required: true
        schema:
          $ref: "#/definitions/Log"
      responses:
        "200":
          description: "Log atualizado com sucesso."
          schema:
            $ref: "#/definitions/Log"
        "400":
          description: "ID inválido!"
        "401":
          description: "Token inválido!"
        "404":
          description: "Log não encontrado!"
        "405":
          description: "Você não tem permissão para alterar logs!"
      security:
      - token: []
  /logs/{id}/log-delete:
    delete:
        tags:
        - "log"
        summary: "Deleta o log pelo ID"
        description: "Deleta um unico registro de log cujo id foi passado na url"
        operationId: "log-delete"
        produces:
        - "application/json"
        parameters:
        - name: "id"
          in: "path"
          description: "ID do log que será deletado"
          required: true
          type: "integer"
          minimum: 1
          format: "int64"
        responses:
          "200":
            description: "Log deletado com sucesso!"
          "400":
            description: "ID inválido!"
          "401":
            description: "Token inválido!"
          "404":
            description: "Log não encontrado!"
          "405":
            description: "Você não tem permissão para deletar logs!"
        security:
        - token: []
  /logs:
    get:
      tags:
      - "log"
      summary: "Todos os logs registrados no sistema"
      description: "Retorna uma lista de logs do usuario cujo token é validado pelo header."
      operationId: "log-list-all"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Log"
        "401":
          description: "Token inválido!"
      security:
      - token: []
  /logs/log-list:
    get:
      tags:
      - "log"
      summary: "Logs do usuario logado no sistema"
      description: "Retorna uma lista de logs do usuario cujo token é validado pelo header."
      operationId: "log-list"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Log"
        "401":
          description: "Token inválido!"
      security:
      - token: []
  /logs/{id}/log-detail:
    get:
      tags:
      - "log"
      summary: "Acha log pelo id"
      description: "Retorna um unico log"
      operationId: "log-details"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID do Log a ser retornado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Log"
        "400":
          description: "Id inválido!"
        "404":
          description: "Log não encontrado!"
      security:
      - token: []
  /account/register:
    post:
      tags:
      - "user"
      summary: "Cria usuario"
      description: "Cria usuario e gera seu token"
      operationId: "register"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Usuario a ser criado"
        required: true
        schema:
          $ref: "#/definitions/UserCriacao"
      responses:
        default:
          description: "successful operation"
  /account/login:
    get:
      tags:
      - "user"
      summary: "Loga o usuário no sistema"
      description: ""
      operationId: "login"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid username/password supplied"
  
securityDefinitions:
  token:
    type: "apiKey"
    name: "token"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
      is_staff:
        type: "boolean"
      is_admin:
        type: "boolean"
      is_active:
        type: "boolean"
      is_superuser:
        type: "boolean"
      date_joned:
        type: "string"
        format: "date-time"
      last_login:
        type: "string"
        format: "date-time"
        
  UserCreated:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      email:
        type: "string"
        format: "email"
      is_staff:
        type: "boolean"
      is_admin:
        type: "boolean"
      is_active:
        type: "boolean"
      is_superuser:
        type: "boolean"
      date_joned:
        type: "string"
        format: "date-time"
      last_login:
        type: "string"
        format: "date-time"
  UserCriacao:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
  
  Log:
    type: "object"
    required:
    - "title"
    - "user"
    - "level"
    - "ambient"
    - "event"
    - "origin"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      user:
        $ref: "#/definitions/UserCreated"
      title:
        type: "string"
        example: "Titulo do meu Log."
      description:
        type: "string"
        description: "Descrição do erro."
        example: "Descrição do log."
      level:
        type: "string"
        description: "Severidade do log"
        enum:
        - "critical"
        - "debug"
        - "error"
        - "warning"
        - "info"
      event:
        type: "integer"
        format: "int64"
        example: 1500
      origin:
        type: "string"
        description: "Endereço onde ocorreu o erro."
        format: "ipv4"
      archived:
        type: "boolean"
        description: "Log foi arquivado"
      ambient:
        type: "string"
        description: "Ambiente onde foi localizado o erro."
        enum:
          - "Produção"
          - "Homologação"
          - "dev"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"